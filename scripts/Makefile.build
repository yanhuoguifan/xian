#./scripts/Makefile.build是通过make -f 而不是在Makefile中include使用的,其本身就是一个make的起始脚本
# ./scripts/Makefile.build在内核主要通过一个变量定义的方式使用,此变量定义在Kbuild.include中，
#所有include此文件的make脚本均可以使用此变量:
#build := -f $(srctree)/scripts/Makefile.build obj
src := $(obj)

PHONY := __build
#默认情况下Makefile的第一个目标为终极目标
__build:

# Init all relevant variables used in kbuild files so
# 1) they have correct type
# 2) they do not inherit any value from the environment
#  这些变量的赋值大部分来源于当前要编译目录$(obj)的Makefile,
#之后通过Makefiel.lib来处理，其中部分变量在用户输入中的含义和在此脚本中后续的含义不同
obj-y :=
always :=
targets :=
subdir-y :=
EXTRA_AFLAGS   :=
EXTRA_CFLAGS   :=
EXTRA_CPPFLAGS :=
EXTRA_LDFLAGS  :=
asflags-y  :=
ccflags-y  :=
cppflags-y :=
ldflags-y  :=

include scripts/Kbuild.include

#包含.config配置
# Read auto.conf if it exists, otherwise ignore
-include include/config/auto.conf

# The filename Kbuild has precedence over Makefile
## 从源码目录依次查找kbuild或Makefile文件是否存在，第一个找到的文件的全路径记录到kbuild-file中
## 这也是当前make真正要编译的子目录中有效的makefile
kbuild-dir := $(if $(filter /%,$(src)),$(src),$(srctree)/$(src))

## 从源码目录依次查找kbuild或Makefile文件是否存在，第一个找到的文件的全路径记录到kbuild-file中
## 这也是当前make真正要编译的子目录中有效的makefile
kbuild-file := $(if $(wildcard $(kbuild-dir)/Kbuild),$(kbuild-dir)/Kbuild,$(kbuild-dir)/Makefile)

## 包含当前要编译的目录中的Kbuild或Makefile文件
include $(kbuild-file)

## 包含Makefile.lib,其中会对前面预定义中各种变量进行处理，这些变量的赋值通常来自$(kbuild-file)
include scripts/Makefile.lib

# Do not include hostprogs rules unless needed.
# $(sort ...) is used here to remove duplicated words and excessive spaces.

hostprogs := $(sort $(hostprogs))

ifneq ($(hostprogs),)
    #包含主机程序编译规则
    include scripts/Makefile.host
endif

## 若make参数中没有指定obj，则直接报错，当前文件使用错误
ifndef obj
    $(warning kbuild: Makefile.build is included improperly)
endif

# ===========================================================================

## lib-y在Makefile.lib中已经处理为包含 lib-y和lib-m中的所有内容，这里实际上加上lib-m应该没有意义
## 这里判断是否要编译库相关内容，若编译则设置 lib-target为此目录对应的库函数路径(xxx/lib.a)

ifneq ($(strip $(lib-y) $(lib-m) $(lib-n) $(lib-)),)
lib-target := $(obj)/lib.a
endif

#如果当前目录中存在要编译到内核的目标，那么则当前目录需要编译出 built-in.o文件
ifneq ($(strip $(obj-y) $(obj-m) $(obj-n) $(obj-) $(subdir-m) $(lib-target)),)
builtin-target := $(obj)/built-in.o
endif

# We keep a list of all modules in $(MODVERDIR)
#默认目标
#此目标的依赖可以拆成2部分:
#  1.KBUILD_BUILTIN:
#    这本身是从Kbuild根Makefile(./Makefile)中export来的变量，代表当前是否要编译内核xian，
#如果要编译内核xian，则需要构建:
#    * $(builtin-target): 即$(obj)/built-in.o，代表当前目录的所有要集成到内核的目标文件的归档
#（obj-y是built-in.a的依赖项，所以这里不用单独指定如obj-y）
#    * $(lib-target): 即$(obj)/lib.a(若有)，代表当前目录所有要编译的作为库的目标文件的归档
#    * $(extra-y):代表不合入vmlinux，但在编译xian中需要同时编译的目标
#  2.always-y实质上是主机程序

__build: $(if $(KBUILD_BUILTIN),$(builtin-target) $(lib-target) $(extra-y)) \
	$(always-y) $(subdir-ym)
	@:

modname = $(basetarget)
#复合目标的依赖文件的编译规则
$(multi-objs-y)         : modname = $(modname-multi)

# C (.c) files
# The C file is compiled and updated dependency information is generated.
# (See cmd_cc_o_c + relevant part of rule_cc_o_c)

quiet_cmd_cc_o_c = CC $(quiet_modtag)  $@

#C文件编译语句
cmd_cc_o_c = $(CC) $(c_flags) -c -o $@ $<

#单独的.c->.o文件编译命令
$(obj)/%.o: $(src)/%.c FORCE
	$(call if_changed_rule,cc_o_c)

quiet_cmd_as_o_S = AS $(quiet_modtag)  $@

#S文件编译语句
cmd_as_o_S       = $(CC) $(a_flags) -c -o $@ $<

#.S->.o文件编译命令
$(obj)/%.o: $(src)/%.S FORCE
	$(call if_changed_dep,as_o_S)

## 在所有真正的目标中过滤掉所有子目录目标 %/built-in.o，正常应该只剩下各种 *.o
targets += $(real-objs-y) $(real-objs-m) $(lib-y)
## targets增加 extra-y中的目标 make中参数指定的默认目标，always中的目标
targets += $(extra-y) $(MAKECMDGOALS) $(always-y)

# Linker scripts preprocessor (.lds.S -> .lds)
# ---------------------------------------------------------------------------
quiet_cmd_cpp_lds_S = LDS     $@
      cmd_cpp_lds_S = $(CPP) $(cpp_flags) -P -U$(ARCH) \
	                     -D__ASSEMBLY__ -DLINKER_SCRIPT -o $@ $<

$(obj)/%.lds: $(src)/%.lds.S FORCE
	$(call if_changed_dep,cpp_lds_S)

#
# Rule to compile a set of .o files into one .o file
#
ifdef builtin-target
quiet_cmd_link_o_target = LD      $@
# If the list of objects to link is empty, just create an empty built-in.o
cmd_link_o_target = $(if $(strip $(obj-y)),\
		      $(LD) $(ld_flags) -r -o $@ $(filter $(obj-y), $^) \
		      $(cmd_secanalysis),\
		      rm -f $@; $(AR) rcs $@)

#该规则同样要首先重建依赖$(obj-y)。而$(obj-y)在$(obj)/Makefile中定义且被赋值。
#这时Make又会查找$(obj-y)包含文件的构建规则。同样地，该规则要么在Makefile.build中，要么在$(obj)/Makefile中。
$(builtin-target): $(obj-y) FORCE
	$(call if_changed,link_o_target)

## 包含当前目录的默认built-in目标 $(obj)/built-in.o
targets += $(builtin-target)
endif # builtin-target

#
# Rule to link composite objects
#
#  Composite objects are specified in kbuild makefile as follows:
#    <composite-object>-objs := <list of .o files>
#  or
#    <composite-object>-y    := <list of .o files>
link_multi_deps =                     \
$(filter $(addprefix $(obj)/,         \
$($(subst $(obj)/,,$(@:.o=-objs)))    \
$($(subst $(obj)/,,$(@:.o=-y)))), $^)

quiet_cmd_link_multi-y = LD      $@
cmd_link_multi-y = $(LD) $(ld_flags) -r -o $@ $(link_multi_deps) 

# We would rather have a list of rules like
# 	foo.o: $(foo-objs)
# but that's not so easy, so we rather make all composite objects depend
# on the set of all their parts
$(multi-used-y) : %.o: $(multi-objs-y) FORCE
	$(call if_changed,link_multi-y)

# Add FORCE to the prequisites of a target to force it to be always rebuilt.
# ---------------------------------------------------------------------------

PHONY += FORCE

FORCE:

## 去除所有的伪目标，并且存在本地文件
targets := $(wildcard $(sort $(targets)))

#targets中包含的内容包括:
#  * 所有obj-y/m中的real目标，以及所有lib-y中的非目录目标（正常应该都是*.o）
#  * extra-y，make参数中的目标，always中指定的目标
#  * 当前编译目录的$(obj)/built-in.a; 和$(obj)/lib.a和$(obj)/lib-ksyms.o
#  * 所有复合目标
#  * 去除所有的伪目标等

# Descending
# ---------------------------------------------------------------------------
#编译子目录
PHONY += $(subdir-ym)
$(subdir-ym):
	$(Q)$(MAKE) $(build)=$@

cmd_files := $(wildcard $(foreach f,$(targets),$(dir $(f)).$(notdir $(f)).cmd))

ifneq ($(cmd_files),)
  include $(cmd_files)
endif

