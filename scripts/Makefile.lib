#按照makefiles.text中的说明(3.7 Compilation flags)， EXTRA_XXFLAGS是老的命名方式，
#xxflags-y这种是新的命名方式，这里的操作的目的是为了兼容老的命名方式.以ccflags-y为例，
#其集成的顺序为:ccflags-y => orig_c_flags => _c_flags => c_flags(代码在./script/Makefile.lib中，见后),
#最终：* 在./script/Makefile.build中，基本使用$(CC)/$(CPP)/$(CHECK)的地方都会加入c_flags
#这几个flag不是export的，也就是说其只在当前make中其作用，而任何submake(如make -f重启的make)，
#或者上层make中是无效的。这也是为什么除了全局的KBUILD_CFLAGS还要增加此FLAG的原因.
#正常的使用方式是在某个目录的Makefile中指定此flag，
#那么针对这个目录的编译(不包括子目录，因为子目录是重启的submake)都会应用此flags

asflags-y  += $(EXTRA_AFLAGS)
ccflags-y  += $(EXTRA_CFLAGS)
ldflags-y  += $(EXTRA_LDFLAGS)
cppflags-y += $(EXTRA_CPPFLAGS)

ifneq ($(always),)
$(warning 'always' is deprecated. Please use 'always-y' instead)
always-y   += $(always)
endif
ifneq ($(hostprogs-y),)
$(warning 'hostprogs-y' is deprecated. Please use 'hostprogs' instead)
hostprogs  += $(hostprogs-y)
endif
ifneq ($(hostprogs-m),)
$(warning 'hostprogs-m' is deprecated. Please use 'hostprogs' instead)
hostprogs  += $(hostprogs-m)
endif

# flags that take effect in current and sub directories
KBUILD_AFLAGS += $(subdir-asflags-y)
KBUILD_CFLAGS += $(subdir-ccflags-y)

# Subdirectories we need to descend into
subdir-ym := $(sort $(subdir-y) $(subdir-m) \
			$(patsubst %/,%, $(filter %/, $(obj-y) $(obj-m))))

obj-y		:= $(patsubst %/, %/built-in.o, $(obj-y))

# 所有模块的%/结尾的(目录)都直接删除，剩下的都是直接编译的目标，而目录是放到subdir-m中统一处理的
obj-m		:= $(filter-out %/, $(obj-m))

#复合目标
# If $(foo-objs), $(foo-y), $(foo-m), or $(foo-) exists, foo.o is a composite object
multi-used-y := $(sort $(foreach m,$(obj-y), $(if $(strip $($(m:.o=-objs)) $($(m:.o=-y)) $($(m:.o=-))), $(m))))
multi-used-m := $(sort $(foreach m,$(obj-m), $(if $(strip $($(m:.o=-objs)) $($(m:.o=-y)) $($(m:.o=-m)) $($(m:.o=-))), $(m))))
multi-used   := $(multi-used-y) $(multi-used-m)

# Build list of the parts of our composite objects, our composite
# objects depend on those (obviously)
multi-objs-y := $(foreach m, $(multi-used-y), $($(m:.o=-objs)) $($(m:.o=-y)))

#最终依赖的目标，与复合目标是互补的，且没有交集
# Replace multi-part objects by their individual parts,
# including built-in.a from subdirectories
real-obj-y := $(foreach m, $(obj-y), $(if $(strip $($(m:.o=-objs)) $($(m:.o=-y)) $($(m:.o=-))),$($(m:.o=-objs)) $($(m:.o=-y)),$(m)))
real-obj-m := $(foreach m, $(obj-m), $(if $(strip $($(m:.o=-objs)) $($(m:.o=-y)) $($(m:.o=-m)) $($(m:.o=-))),$($(m:.o=-objs)) $($(m:.o=-y)) $($(m:.o=-m)),$(m)))


always-y += $(always-m)


# hostprogs-always-y += foo
# ... is a shorthand for
# hostprogs += foo
# always-y  += foo
hostprogs += $(hostprogs-always-y) $(hostprogs-always-m)
always-y += $(hostprogs-always-y) $(hostprogs-always-m)


always-y	:= $(addprefix $(obj)/,$(always-y))
## targets也完全来自于用户输入，其主要有两个作用：
## 1是对if_changed系列函数做支持，如果一个目标想通过if_changed来判断只有更改时才重新编译，那么就必须要加入到targets中
## 2是对clean的支持，clean的时候会清除targets中的所有相关文件
targets		:= $(addprefix $(obj)/,$(targets))y
obj-y		:= $(addprefix $(obj)/,$(obj-y))
real-obj-y	:= $(addprefix $(obj)/,$(real-obj-y))
multi-used-y	:= $(addprefix $(obj)/,$(multi-used-y))
subdir-ym	:= $(addprefix $(obj)/,$(subdir-ym))

# target with $(obj)/ and its suffix stripped
target-stem = $(basename $(patsubst $(obj)/%,%,$@))

orig_c_flags   = $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS) $(KBUILD_SUBDIR_CCFLAGS) \
                 $(ccflags-y) $(CFLAGS_$(basetarget).o)
_c_flags       = $(filter-out $(CFLAGS_REMOVE_$(basetarget).o), $(orig_c_flags))
_a_flags       = $(KBUILD_CPPFLAGS) $(KBUILD_AFLAGS) $(KBUILD_SUBDIR_ASFLAGS) \
                 $(asflags-y) $(AFLAGS_$(basetarget).o)
_cpp_flags     = $(KBUILD_CPPFLAGS) $(cppflags-y) $(CPPFLAGS_$(target-stem).lds)

# If building the kernel in a separate objtree expand all occurrences
# of -Idir to -I$(srctree)/dir except for absolute paths (starting with '/').

ifeq ($(KBUILD_SRC),)
__c_flags	= $(_c_flags)
__a_flags	= $(_a_flags)
__cpp_flags     = $(_cpp_flags)

else
__c_flags	= $(call addtree,-I$(obj)) $(call flags,_c_flags)
__a_flags	=                          $(call flags,_a_flags)
__cpp_flags     =                          $(call flags,_cpp_flags)
endif

# 在编译的几个x_flgas中都通过-Wp,-MD,$(depfile)指定了将依赖头文件输出到$(dot-target).d文件中
c_flags        = -Wp,-MMD,$(depfile) $(NOSTDINC_FLAGS) $(LINUXINCLUDE)     \
		 -include $(srctree)/include/linux/compiler_types.h       \
		 $(_c_flags) $(modkern_cflags)                           \
		 $(basename_flags) $(modname_flags)

a_flags        = -Wp,-MMD,$(depfile) $(NOSTDINC_FLAGS) $(LINUXINCLUDE)     \
		 $(_a_flags) $(modkern_aflags)

cpp_flags      = -Wp,-MD,$(depfile) $(NOSTDINC_FLAGS) $(LINUXINCLUDE)     \
		 $(__cpp_flags)

ld_flags       = $(KBUILD_LDFLAGS) $(ldflags-y) $(LDFLAGS_$(@F))

# Finds the multi-part object the current object will be linked into
modname-multi = $(sort $(foreach m,$(multi-used),\
		$(if $(filter $(subst $(obj)/,,$*.o), $($(m:.o=-objs)) $($(m:.o=-y))),$(m:.o=))))

# Useful for describing the dependency of composite objects
# Usage:
#   $(call multi_depend, multi_used_targets, suffix_to_remove, suffix_to_add)
define multi_depend
$(foreach m, $(notdir $1), \
	$(eval $(obj)/$m: \
	$(addprefix $(obj)/, $(foreach s, $3, $($(m:%$(strip $2)=%$(s)))))))
endef

# Linking
# ---------------------------------------------------------------------------

quiet_cmd_ld = LD      $@
cmd_ld = $(LD) $(ld_flags) $(filter-out FORCE,$^) -o $@ 

# Objcopy
# ---------------------------------------------------------------------------
#$(notdir $@)等价于@F，表示目标的文件部分
quiet_cmd_objcopy = OBJCOPY $@
cmd_objcopy = $(OBJCOPY) $(OBJCOPYFLAGS) $(OBJCOPYFLAGS_$(@F)) $< $@